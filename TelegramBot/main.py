# SQL & .env FILE
import os
import sql
from dotenv import  load_dotenv
load_dotenv()


# AIOGRAM
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage


# YOOKASSA
import uuid
from yookassa import Payment, Configuration


# DADATA & DELIVERY
import requests
from dadata import Dadata


# YOOKASSA CONFIGURATION
Configuration.account_id = os.getenv('YOOKASSA_SHOP_ID')
Configuration.secret_key = os.getenv('YOOKASSA_SECRET_KEY')


# DADATA CONFIGURATION
dadata = Dadata(os.getenv('DADATA_API'), os.getenv('DADATA_SECRET_KEY'))


# AIOGRAM CONFIGURATION
storage = MemoryStorage()
logging.basicConfig(level=logging.INFO, filename='error.log', format='%(asctime)s %(levelname)s %(name)s %(message)s')
logger = logging.getLogger(__name__)
bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=storage)


# ID –ê–î–ú–ò–ù–û–í
admins = (331237254, 413630086, 6199961135)
admin_only = lambda message: message.from_user.id in admins


# –¶–ï–ù–ê –§–£–¢–ë–û–õ–ö–ò
tshirtPrice = 1850
tshirtWeight = 250


# –ö–õ–ê–í–ò–ê–¢–£–†–ê –ü–û–ö–£–ü–ö–ò
buyKeyboard = InlineKeyboardMarkup()
buyKeyboard.add(InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buyCallback"))


# –ö–õ–ê–í–ò–ê–¢–£–†–ê –ü–û–ö–£–ü–ö–ò ‚Ññ2
buyAnotherKeyboard = InlineKeyboardMarkup()
buyAnotherKeyboard.add(InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="buyAnother"))


# –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ö–û–†–ó–ò–ù–£
afterPurchaseKeyboard = InlineKeyboardMarkup()
afterPurchaseKeyboard.add(InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –µ—â–µ üîÑ", callback_data="buyAnother"))
afterPurchaseKeyboard.add(InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data="goToCart"))


# –ö–õ–ê–í–ò–ê–¢–£–†–ê –ö–û–†–ó–ò–ù–´
cartKeyboard = InlineKeyboardMarkup()
cartKeyboard.add(InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clearCart"))
cartKeyboard.add(InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ üè∑Ô∏è", callback_data="addDiscount"))
cartKeyboard.add(InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üßæ", callback_data="createPayment"))


# –ö–õ–ê–í–ò–ê–¢–£–†–ê –ê–î–†–ï–°–ê
userInfoKeyboard = InlineKeyboardMarkup()
userInfoKeyboard.add(InlineKeyboardButton(text='‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ', callback_data='acceptPaymentInfo'))
userInfoKeyboard.add(InlineKeyboardButton(text='‚úè –ò–∑–º–µ–Ω–∏—Ç—å', callback_data='declinePaymentInfo'))


# FSM –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê
class OrderStateGroup(StatesGroup):
    fullname = State()
    phone = State()
    address = State()


# FSM –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê
class DiscountStateGroup(StatesGroup):
    discount = State()


# FSM –†–ê–°–°–´–õ–ö–ò
class MessageStateGroup(StatesGroup):
    message = State()
    photo = State()


# –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê
def CreateMenuKeyboard():
    menuKeyboard = InlineKeyboardMarkup()
    menuKeyboard.row(InlineKeyboardButton(text='-', callback_data='quantityMinus'),
                    InlineKeyboardButton(text='1 —à—Ç.', callback_data='quantityTotal'),
                    InlineKeyboardButton(text='+', callback_data='quantityPlus'))
    menuKeyboard.row(InlineKeyboardButton(text='S', callback_data='size_S'),
                    InlineKeyboardButton(text='‚úÖ M', callback_data='size_M'),
                    InlineKeyboardButton(text='L', callback_data='size_L'),
                    InlineKeyboardButton(text='XL', callback_data='size_XL'),
                     InlineKeyboardButton(text='XXL', callback_data='size_XXL'))
    menuKeyboard.add(InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí', callback_data='addToCart'))
    return menuKeyboard


# –ö–û–ú–ê–ù–î–ê –ü–û–ö–£–ü–ö–ò
@dp.message_handler(commands=['start', 'buy'])
async def buyCommand(message: types.Message):
    dbUser = sql.SelectUserById(message['from']['id'])
    if len(dbUser) == 0:
        sql.InsertUser(message['from']['id'], message['from']['username'], message['from']['language_code'])

    photo = open("clothes/love_tren.jpg", 'rb')
    caption = f"*OnPump ¬´LoveTren¬ª OVERSIZED T-SHIRT*\n\n" \
              f"–°–æ—Å—Ç–∞–≤: 100% —Ö–ª–æ–ø–æ–∫\n" \
              f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 185 –≥/–º¬≤\n" \
              f"–ü—Ä–∏–Ω—Ç: DTF-–ø–µ—á–∞—Ç—å\n" \
              f"–†–∞–∑–º–µ—Ä—ã: S / M / L / XL / XXL\n\n" \
              f"*–¶–µ–Ω–∞:* 1 850‚ÇΩ"
    await message.answer_photo(photo=photo, caption=caption, parse_mode=ParseMode.MARKDOWN, reply_markup=buyKeyboard)


# –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ü–û–ö–£–ü–ö–ò
@dp.callback_query_handler(text="buyCallback")
async def buyCallback(callback: types.CallbackQuery):
    menuKeyboard = CreateMenuKeyboard()
    sql.InsertUserPrecart(callback.message.chat.id, callback.message.message_id)
    await callback.message.edit_caption(f"*OnPump ¬´LoveTren¬ª OVERSIZED T-SHIRT*\n\n"
                                        f"*–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä:* M\n"
                                        f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* 1 850‚ÇΩ √ó 1 = 1 850‚ÇΩ\n\n"
                                        f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ *–∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É¬ª*",
                                        parse_mode=ParseMode.MARKDOWN, reply_markup=menuKeyboard)


# –ò–ó–ú–ï–ù–ï–ù–ò–ï –†–ê–ó–ú–ï–†–ê
@dp.callback_query_handler(text_startswith="size_")
async def changeSizeCallback(callback: types.CallbackQuery):
    button = None
    totalButton = None

    userPrecart = sql.SelectUserPrecart(callback.message.chat.id, callback.message.message_id)

    menuKeyboard = CreateMenuKeyboard()
    buttonTextList = ['S', 'M', 'L', 'XL', 'XXL']
    buttonRow = menuKeyboard.values['inline_keyboard'][1]

    for i in range(len(buttonRow)):
        buttonRow[i].text = f"{buttonTextList[i]}"
        if callback.data == buttonRow[i]['callback_data']:
            button = buttonRow[i]
    button.text = f"‚úÖ {callback.data.replace('size_', '')}"

    buttonRow = menuKeyboard.values['inline_keyboard'][0]
    for i in range(len(buttonRow)):
        if buttonRow[i]['callback_data'] == "quantityTotal":
            totalButton = buttonRow[i]
    totalButton.text = f"{userPrecart[0][4]} —à—Ç."

    sql.UpdateUserPrecartSize(callback.data.replace('size_', ''), callback.message.chat.id, callback.message.message_id)
    priceFormat = '{:,}'.format(tshirtPrice * userPrecart[0][4]).replace(',', ' ')
    await callback.message.edit_caption(f"*OnPump ¬´LoveTren¬ª OVERSIZED T-SHIRT*\n\n"
                                        f"*–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä:* {callback.data.replace('size_', '')}\n"
                                        f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* 1 850‚ÇΩ √ó {userPrecart[0][4]} = {priceFormat}‚ÇΩ\n\n"
                                        f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ *–∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É¬ª*", parse_mode=ParseMode.MARKDOWN, reply_markup=menuKeyboard)


# –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê
@dp.callback_query_handler(text_startswith="quantity")
async def changeQuantityCallback(callback: types.CallbackQuery):
    button = None
    totalButton = None

    userPrecart = sql.SelectUserPrecart(callback.message.chat.id, callback.message.message_id)

    menuKeyboard = CreateMenuKeyboard()
    buttonTextList = ['S', 'M', 'L', 'XL', 'XXL']
    buttonRow = menuKeyboard.values['inline_keyboard'][1]

    for i in range(len(buttonRow)):
        buttonRow[i].text = f"{buttonTextList[i]}"
        if buttonRow[i]['callback_data'].replace("size_", '') == userPrecart[0][3]:
            button = buttonRow[i]
    button.text = f"‚úÖ {userPrecart[0][3]}"

    buttonRow = menuKeyboard.values['inline_keyboard'][0]
    for i in range(len(buttonRow)):
        if callback.data == buttonRow[i]['callback_data']:
            button = buttonRow[i]
        if buttonRow[i]['callback_data'] == "quantityTotal":
            totalButton = buttonRow[i]

    quantity = userPrecart[0][4]
    if button.callback_data == "quantityMinus" and quantity > 1:
        quantity -= 1
    elif button.callback_data == "quantityPlus":
        quantity += 1

    totalButton.text = f"{quantity} —à—Ç."
    sql.UpdateUserPrecartQuantity(quantity, callback.message.chat.id, callback.message.message_id)
    priceFormat = '{:,}'.format(tshirtPrice * quantity).replace(',', ' ')
    await callback.message.edit_caption(f"*OnPump ¬´LoveTren¬ª OVERSIZED T-SHIRT*\n\n"
                                        f"*–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä:* {userPrecart[0][3]}\n"
                                        f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* 1 850‚ÇΩ √ó {quantity} = {priceFormat}‚ÇΩ\n\n"
                                        f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ *–∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É¬ª*", parse_mode=ParseMode.MARKDOWN, reply_markup=menuKeyboard)


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£
@dp.callback_query_handler(text="addToCart")
async def addToCart(callback: types.CallbackQuery):
    userPrecart = sql.SelectUserPrecart(callback.message.chat.id, callback.message.message_id)
    sql.InsertUserCart(callback.message.chat.id, userPrecart[0][3], userPrecart[0][4])
    sql.DeleteUserPrecart(callback.message.chat.id, callback.message.message_id)
    priceFormat = '{:,}'.format(tshirtPrice * userPrecart[0][4]).replace(',', ' ')
    await callback.message.delete()
    await callback.message.answer(f"*üëï –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:*\n"
                                  f"OnPump ¬´LoveTren¬ª OVERSIZED T-SHIRT\n"
                                  f"*–†–∞–∑–º–µ—Ä:* {userPrecart[0][3]}\n"
                                  f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {userPrecart[0][4]}\n"
                                  f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {priceFormat}‚ÇΩ", parse_mode=ParseMode.MARKDOWN, reply_markup=afterPurchaseKeyboard)


# –ö–£–ü–ò–¢–¨ –ï–©–ï (–ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ö–û–†–ó–ò–ù–£)
@dp.callback_query_handler(text="buyAnother")
async def buyAnother(callback: types.CallbackQuery):
    photo = open("clothes/love_tren.jpg", 'rb')
    caption = f"*OnPump ¬´LoveTren¬ª OVERSIZED T-SHIRT*\n\n" \
              f"–°–æ—Å—Ç–∞–≤: 100% —Ö–ª–æ–ø–æ–∫\n" \
              f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 185 –≥/–º¬≤\n" \
              f"–ü—Ä–∏–Ω—Ç: DTF-–ø–µ—á–∞—Ç—å\n" \
              f"–†–∞–∑–º–µ—Ä—ã: S / M / L / XL / XXL\n\n" \
              f"*–¶–µ–Ω–∞:* 1 850‚ÇΩ"
    await callback.message.delete()
    await callback.message.answer_photo(photo=photo, caption=caption, parse_mode=ParseMode.MARKDOWN, reply_markup=buyKeyboard)


# –ö–û–ú–ê–ù–î–ê –ö–û–†–ó–ò–ù–´
@dp.message_handler(commands=['cart'])
async def cartCommand(message: types.Message):
    totalSum = 0
    msg = f"*–ö–æ—Ä–∑–∏–Ω–∞ üõí*\n" \
          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"

    cart = sql.SelectUserCart(message.chat.id)
    uDiscount = sql.SelectUserDiscount(message.chat.id)

    if len(cart) > 0:
        for index, items in enumerate(cart):
            totalSum += tshirtPrice * items[3]
            priceFormat = '{:,}'.format(tshirtPrice * items[3]).replace(',', ' ')
            msg += f"{index + 1}. OnPump ¬´LoveTren¬ª OVERSIZED T-SHIRT [{items[2]}] √ó {items[3]} = {priceFormat}‚ÇΩ\n"

        if len(uDiscount) > 0:
            discount = sql.SelectDiscountById(uDiscount[0][2])
            totalSum = totalSum - (totalSum * discount[0][2] / 100)
            totalSum = '{:,}'.format(totalSum).replace(',', ' ').replace('.0', '')
            msg += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"*–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:* {discount[0][1]}\n" \
                   f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {totalSum}‚ÇΩ"
        else:
            totalSum = '{:,}'.format(totalSum).replace(',', ' ')
            msg += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {totalSum}‚ÇΩ"
        await message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=cartKeyboard)
    else:
        await message.answer(f"*–ö–æ—Ä–∑–∏–Ω–∞ üõí*\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"–ü—É—Å—Ç–æ...\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* 0‚ÇΩ", parse_mode=ParseMode.MARKDOWN,
                                         reply_markup=buyAnotherKeyboard)


# –ü–ï–†–ï–•–û–î –í –ö–û–†–ó–ò–ù–£
@dp.callback_query_handler(text="goToCart")
async def goToCart(callback: types.CallbackQuery):
    await callback.message.delete()
    totalSum = 0
    msg = f"*–ö–æ—Ä–∑–∏–Ω–∞ üõí*\n" \
          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"

    cart = sql.SelectUserCart(callback.message.chat.id)
    uDiscount = sql.SelectUserDiscount(callback.message.chat.id)

    if len(cart) > 0:
        for index, items in enumerate(cart):
            totalSum += tshirtPrice * items[3]
            priceFormat = '{:,}'.format(tshirtPrice * items[3]).replace(',', ' ')
            msg += f"{index + 1}. OnPump ¬´LoveTren¬ª OVERSIZED T-SHIRT [{items[2]}] √ó {items[3]} = {priceFormat}‚ÇΩ\n"

        if len(uDiscount) > 0:
            discount = sql.SelectDiscountById(uDiscount[0][2])
            totalSum = totalSum - (totalSum * discount[0][2] / 100)
            totalSum = '{:,}'.format(totalSum).replace(',', ' ').replace('.0', '')
            msg += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"*–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥:* {discount[0][1]}\n" \
                   f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {totalSum}‚ÇΩ"
        else:
            totalSum = '{:,}'.format(totalSum).replace(',', ' ')
            msg += f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {totalSum}‚ÇΩ"
        await callback.message.answer(msg, parse_mode=ParseMode.MARKDOWN, reply_markup=cartKeyboard)
    else:
        await callback.message.answer(f"*–ö–æ—Ä–∑–∏–Ω–∞ üõí*\n"
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"–ü—É—Å—Ç–æ...\n"
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0‚ÇΩ", parse_mode=ParseMode.MARKDOWN,
                             reply_markup=buyAnotherKeyboard)


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê
@dp.callback_query_handler(text="addDiscount")
async def addDiscount(callback: types.CallbackQuery):
    await callback.message.delete()
    await DiscountStateGroup.discount.set()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫–∏–¥–∫–∏:")


# –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê, –í–í–ï–î–ï–ù–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
@dp.message_handler(state=DiscountStateGroup.discount)
async def getDiscount(message: types.Message, state: FSMContext):
    discountKeyboard = InlineKeyboardMarkup()
    discountKeyboard.add(InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ üè∑Ô∏è", callback_data="addDiscount"))
    discountKeyboard.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data="goToCart"))

    sKeyboard = InlineKeyboardMarkup()
    sKeyboard.add(InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É üõí', callback_data='goToCart'))

    await state.finish()
    discount = sql.SelectDiscount(message.text)
    if len(discount) > 0:
        sql.DeleteUserDiscount(message.chat.id)
        sql.InsertUserDiscount(message.chat.id, discount[0][0])
        sql.UpdateDiscountUsage(discount[0][0])
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ `{discount[0][1]}` –Ω–∞ —Å–∫–∏–¥–∫—É –≤ {discount[0][2]}% —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!", parse_mode=ParseMode.MARKDOWN, reply_markup=sKeyboard)
    else:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=discountKeyboard)


# –û–ß–ò–°–¢–ö–ê –ö–û–†–ó–ò–ù–´
@dp.callback_query_handler(text="clearCart")
async def clearCart(callback: types.CallbackQuery):
    sql.DeleteUserCart(callback.message.chat.id)
    sql.DeleteUserDiscount(callback.message.chat.id)
    await callback.message.edit_text(f"*–ö–æ—Ä–∑–∏–Ω–∞ üõí*\n"
                                     f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"–ü—É—Å—Ç–æ...\n"
                                     f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* 0‚ÇΩ", parse_mode=ParseMode.MARKDOWN,
                                     reply_markup=buyAnotherKeyboard)


# –°–û–ó–î–ê–¢–¨ –ü–õ–ê–¢–ï–ñ
@dp.callback_query_handler(text="createPayment")
async def createPayment(callback: types.CallbackQuery):
    await OrderStateGroup.fullname.set()
    await callback.message.answer(f"üë§ *–£–∫–∞–∂–∏—Ç–µ –§–ò–û –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ:*\n"
                                  f"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", parse_mode=ParseMode.MARKDOWN)


# –ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@dp.message_handler(state=OrderStateGroup.fullname)
async def getName(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['fullname'] = message.text
    await OrderStateGroup.next()
    await message.answer(f"üì±*–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n"
                         f"*–í —Ñ–æ—Ä–º–∞—Ç–µ:* +79012345678", parse_mode=ParseMode.MARKDOWN)


# –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–õ–ï–§–û–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@dp.message_handler(state=OrderStateGroup.phone)
async def getPhone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        await OrderStateGroup.next()
        await message.answer("üöö *–£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–≠–ö–∞*\n\n"
                     "*–ù–∞–ø—Ä–∏–º–µ—Ä:* –ú–æ—Å–∫–≤–∞ –¢–≤–µ—Ä—Å–∫–∞—è 4 –∫–≤ 56\n", parse_mode=ParseMode.MARKDOWN)


# –ü–û–õ–£–ß–ï–ù–ò–ï –ê–î–†–ï–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@dp.message_handler(state=OrderStateGroup.address)
async def getAddress(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        result = dadata.clean("address", message.text)
        if result['country'] in ("–†–æ—Å—Å–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ë–µ–ª–∞—Ä—É—Å—å"):
            await message.answer(f"üë§ *–§–ò–û:* {data['fullname']}\n"
                                 f"üì±*–¢–µ–ª–µ—Ñ–æ–Ω:* {data['phone']}\n"
                                 f"üöö *–£–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:* {result['result']}\n\n"
                                 f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!", parse_mode=ParseMode.MARKDOWN, reply_markup=userInfoKeyboard)
            sql.InsertPaymentInfo(message.chat.id, data['fullname'], data['phone'], result['result'], result['postal_code'], result['country'])
        else:
            await message.answer(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É `{result['result']}` –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!", parse_mode=ParseMode.MARKDOWN)
    await state.finish()


# –ò–ó–ú–ï–ù–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ï –í–ï–†–ù–ê)
@dp.callback_query_handler(text="declinePaymentInfo")
async def declinePaymentInfo(callback: types.CallbackQuery):
    await OrderStateGroup.fullname.set()
    await callback.message.answer(f"üë§ *–£–∫–∞–∂–∏—Ç–µ –§–ò–û –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ:*\n"
                                  f"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", parse_mode=ParseMode.MARKDOWN)


# –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–°–´–õ–ö–ò –ù–ê –ü–õ–ê–¢–ï–ñ (–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í–ï–†–ù–ê)
@dp.callback_query_handler(text="acceptPaymentInfo")
async def acceptPaymentInfo(callback: types.CallbackQuery):
    sizes = ""
    amount = 0
    delivery = 0
    paymentValue = 0
    info = sql.SelectUserPaymentInfo(callback.message.chat.id)
    cart = sql.SelectUserCart(callback.message.chat.id)

    username = sql.SelectUsernameById(callback.message.chat.id)
    if username[0][0] is None:
        username = info[0][1]
    else:
        username = username[0][0]

    desc = f"–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}. –†–∞–∑–º–µ—Ä—ã: "

    uDiscount = sql.SelectUserDiscount(callback.message.chat.id)

    for index, items in enumerate(cart):
        amount += items[3]
        sizes += f"{items[2]} {items[3]};"
        paymentValue += tshirtPrice * items[3]

    if len(uDiscount) > 0:
        discount = sql.SelectDiscountById(uDiscount[0][2])
        paymentValue = paymentValue - (paymentValue * discount[0][2] / 100)

    if info[0][6] == "–†–æ—Å—Å–∏—è":
        r = requests.get(f"https://postprice.ru/engine/russia/api.php?from=432072&to={info[0][5]}&mass={amount * tshirtWeight}&vat=1&apikey={os.getenv('POSTPRICE_API')}")
        if amount < 2:
            delivery = int(r.json()['pkg']) + 24 + 30
        else:
            delivery = int(r.json()['pkg']) + 64 + 60
    elif info[0][6] == "–ë–µ–ª–∞—Ä—É—Å—å":
        if amount < 2:
            delivery = 490 + 24 + 30
        else:
            delivery = 490 + 24 + 60
    elif info[0][6] == "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":
        if amount < 2:
            delivery = 520 + 24 + 30
        else:
            delivery = 520 + 24 + 60
    paymentValue = str(paymentValue + delivery).replace('.0', '')

    payment = Payment.create({
        "amount": {
          "value": f"{paymentValue}.00",
          "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/onpumpbot"
        },
        "capture": True,
        "description": f"{desc}{sizes}"
    }, uuid.uuid4())
    sql.InsertReceipt(callback.message.chat.id, payment.id, sizes, paymentValue, info[0][2], info[0][3], info[0][4])

    photo = open("clothes/love_tren.jpg", 'rb')
    confirmation_url = payment.confirmation.confirmation_url
    priceFormat = '{:,}'.format(int(paymentValue)).replace(',', ' ')
    caption = f"üë§ *–§–ò–û:* {info[0][2]}\n" \
              f"üì±*–¢–µ–ª–µ—Ñ–æ–Ω:* {info[0][3]}\n" \
              f"üöö *–£–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:* {info[0][4]}\n\n" \
              f"üì¶ *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery}‚ÇΩ\n" \
              f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {priceFormat}‚ÇΩ"

    payKeyboard = InlineKeyboardMarkup()
    payKeyboard.add(InlineKeyboardButton(text="–ó–∞–ø–ª–∞—Ç–∏—Ç—å üí≥", url=confirmation_url))
    payKeyboard.add(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", callback_data=f"checkData_{payment.id}"))
    await callback.message.answer_photo(photo=photo, caption=caption, parse_mode=ParseMode.MARKDOWN, reply_markup=payKeyboard)


# –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–õ–ê–¢–ï–ñ–ê
@dp.callback_query_handler(text_startswith="checkData_")
async def checkData(callback: types.CallbackQuery):
    paymentId = callback.data.replace("checkData_", '')
    payment = Payment.find_one(paymentId)
    sql.UpdateReceiptStatus(paymentId, payment.status)

    if payment.status == "pending":
        await callback.message.answer(f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞! ", parse_mode=ParseMode.MARKDOWN)
    elif payment.status == "canceled":
        await callback.message.answer(f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω!", parse_mode=ParseMode.MARKDOWN)
    elif payment.status == "succeeded":
        np = sql.InsertSucceededPayment(paymentId)
        sql.DeleteReceipt(paymentId)
        sql.DeleteUserCart(callback.message.chat.id)
        sql.DeleteUserDiscount(callback.message.chat.id)
        sql.DeleteUserPaymentInfo(callback.message.chat.id)
        sql.InsertNotify(paymentId)
        sql.InsertTrack(np)
        await callback.message.delete()
        await callback.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –í–∞–º —Ç—Ä–µ–∫-–∫–æ–¥. ", parse_mode=ParseMode.MARKDOWN)

        info = sql.SelectSucceededPayment(paymentId)
        username = sql.SelectUsernameById(callback.message.chat.id)
        if username[0][0] is None:
            username = info[0][1]
        else:
            username = username[0][0]

        msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{info[0][0]} –Ω–∞ —Å—É–º–º—É {info[0][4]}‚ÇΩ\n\n" \
              f"*–†–∞–∑–º–µ—Ä—ã:* {info[0][3]}\n" \
              f"*–§–ò–û:* {info[0][6]}\n" \
              f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {info[0][7]}\n" \
              f"*–ê–¥—Ä–µ—Å:* {info[0][8]}"
        await bot.send_message(-912473672, msg, parse_mode=ParseMode.MARKDOWN)
        sql.UpdateNotify(paymentId)


# –í–´–í–û–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –ï–ì–û –ó–ê–ö–ê–ó–û–í
@dp.message_handler(commands=['orders'])
async def ordersCommand(message: types.Message):
    msg = "*–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:*\n\n"
    payments = sql.SelectUserPayments(message.chat.id)

    for p in payments:
        code = sql.SelectTrackCodeByPaymentId(p[0])
        priceFormat = '{:,}'.format(p[4]).replace(',', ' ')
        msg += f"*–ó–∞–∫–∞–∑ ‚Ññ*`{p[0]}` –Ω–∞ —Å—É–º–º—É {priceFormat}‚ÇΩ\n"

        if code[0][0] is not None:
            msg += f"*–¢—Ä–µ–∫-–∫–æ–¥*: `{code[0][0]}`\n\n"
        else:
            msg += f"*–¢—Ä–µ–∫-–∫–æ–¥*: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN)


# –°–ü–ò–°–û–ö –í–°–ï–• –ö–û–ú–ê–ù–î
@dp.message_handler(admin_only, commands=['help', 'info', 'information'])
async def helpMessage(message: types.Message):
    await message.answer(f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
                         f"/update - –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏\n\n"
                         f"/send <–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞> <—Ç—Ä–µ–∫-–∫–æ–¥> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞\n\n"
                         f"/without - —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ —Ç—Ä–µ–∫-–∫–æ–¥–∞\n\n"
                         f"/get <—Ç—Ä–µ–∫-–∫–æ–¥> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ —Ç—Ä–µ–∫-–∫–æ–¥—É\n\n"
                         f"/order <–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ\n\n"
                         f"/sizes - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö\n\n"
                         f"/gain - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã—Ä—É—á–∫–µ\n\n"
                         f"/users - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î\n\n"
                         f"/promo <–ø—Ä–æ–º–æ–∫–æ–¥> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É\n\n"
                         f"/msg - –æ–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", parse_mode=ParseMode.MARKDOWN)


# –û–ë–ù–û–í–ò–¢–¨ –ü–õ–ê–¢–ï–ñ–ò
@dp.message_handler(admin_only, commands=['update'])
async def updateReceipts(message: types.Message):
    receipts = sql.SelectReceipts()
    for item in receipts:
        paymentId = item[2]
        payment = Payment.find_one(paymentId)
        sql.UpdateReceiptStatus(paymentId, payment.status)

        if payment.status == "canceled":
            sql.DeleteReceipt(paymentId)
        elif payment.status == "succeeded":
            np = sql.InsertSucceededPayment(paymentId)
            username = sql.SelectUsernameById(item[1])
            sql.DeleteReceipt(paymentId)
            sql.DeleteUserCart(item[1])
            sql.DeleteUserPaymentInfo(item[1])
            sql.InsertNotify(paymentId)
            sql.InsertTrack(np)

            await bot.send_message(item[1], "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –í–∞–º —Ç—Ä–µ–∫-–∫–æ–¥. ",
                                          parse_mode=ParseMode.MARKDOWN)

            if username[0][0] is None:
                username = item[1]
            else:
                username = username[0][0]

            msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{np} –Ω–∞ —Å—É–º–º—É {item[4]}‚ÇΩ\n\n" \
                  f"*–†–∞–∑–º–µ—Ä—ã:* {item[3]}\n" \
                  f"*–§–ò–û:* {item[6]}\n" \
                  f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {item[7]}\n" \
                  f"*–ê–¥—Ä–µ—Å:* {item[8]}"
            await bot.send_message(-912473672, msg, parse_mode=ParseMode.MARKDOWN)
            sql.UpdateNotify(paymentId)


# –û–¢–ü–†–ê–í–ö–ê –¢–†–ï–ö-–ö–û–î–ê –ü–û –ù–û–ú–ï–†–£ –ó–ê–ö–ê–ó–ê
@dp.message_handler(admin_only, commands=['send', 'send_track'])
async def sendTrack(message: types.Message):
    args = message.get_args()
    args = args.split()
    payment = sql.SelectSucceededPaymentById(args[0])
    sql.UpdateTrack(args[0], args[1])
    await bot.send_message(payment[0][1], f"üßæ –í–∞—à —Ç—Ä–µ–∫-–∫–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{args[0]}: `{args[1]}`\n", parse_mode=ParseMode.MARKDOWN)
    await bot.send_message(message.chat.id, "–¢—Ä–µ–∫-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


# –°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–û–í –ë–ï–ó –¢–†–ï–ö-–ö–û–î–ê
@dp.message_handler(admin_only, commands=['without', 'without_track'])
async def withoutTrack(message: types.Message):
    payments = sql.SelectPaymentsWoTrackCode()
    for p in payments:
        username = sql.SelectUsernameById(p[1])
        if username[0][0] is None:
            username = p[1]
        else:
            username = username[0][0]

        msg = f"–ó–∞–∫–∞–∑ ‚Ññ{p[0]} –Ω–∞ —Å—É–º–º—É {p[4]}‚ÇΩ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n\n" \
              f"*–†–∞–∑–º–µ—Ä—ã:* {p[3]}\n" \
              f"*–§–ò–û:* {p[6]}\n" \
              f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {p[7]}\n" \
              f"*–ê–¥—Ä–µ—Å:* {p[8]}"
        await message.answer(msg, parse_mode=ParseMode.MARKDOWN)


# –ü–û–õ–£–ß–ò–¢–¨ –ó–ê–ö–ê–ó –ü–û –¢–†–ï–ö-–ö–û–î–£
@dp.message_handler(admin_only, commands=['get', 'get_track'])
async def getTrack(message: types.Message):
    args = message.get_args()
    payment = sql.SelectPaymentByTrackCode(args)
    username = sql.SelectUsernameById(payment[0][1])
    if username[0][0] is None:
        username = payment[0][1]
    else:
        username = username[0][0]

    msg = f"–ó–∞–∫–∞–∑ ‚Ññ{payment[0][0]} –Ω–∞ —Å—É–º–º—É {payment[0][4]}‚ÇΩ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n\n" \
          f"*–†–∞–∑–º–µ—Ä—ã:* {payment[0][3]}\n" \
          f"*–§–ò–û:* {payment[0][6]}\n" \
          f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {payment[0][7]}\n" \
          f"*–ê–¥—Ä–µ—Å:* {payment[0][8]}"
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN)


# –ü–û–õ–£–ß–ò–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ó–ê–ö–ê–ó–ï –ü–û –ï–ì–û –ù–û–ú–ï–†–£
@dp.message_handler(admin_only, commands=['order'])
async def getOrder(message: types.Message):
    args = message.get_args()
    payment = sql.SelectPayment(args)
    username = sql.SelectUsernameById(payment[0][1])
    if username[0][0] is None:
        username = payment[0][1]
    else:
        username = username[0][0]

    msg = f"–ó–∞–∫–∞–∑ ‚Ññ{payment[0][0]} –Ω–∞ —Å—É–º–º—É {payment[0][4]}‚ÇΩ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n\n" \
          f"*–†–∞–∑–º–µ—Ä—ã:* {payment[0][3]}\n" \
          f"*–§–ò–û:* {payment[0][6]}\n" \
          f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {payment[0][7]}\n" \
          f"*–ê–¥—Ä–µ—Å:* {payment[0][8]}"
    await message.answer(msg, parse_mode=ParseMode.MARKDOWN)


# –†–ê–ó–ú–ï–†–´ –ü–û –í–°–ï–ú –ó–ê–ö–ê–ó–ê–ú
@dp.message_handler(admin_only, commands=['sizes'])
async def selectSizes(message: types.Message):
    s, m, l, xl, xxl = 0, 0, 0, 0, 0

    payments = sql.SelectSucceededPayments()
    for p in payments:
        pSize = p[3].split(';')
        for index, size in enumerate(pSize):
            size = size.replace(' ', '')
            if size.startswith('S'):
                s += int(size.replace("S", ''))
            elif size.startswith('M'):
                m += int(size.replace("M", ''))
            elif size.startswith('L'):
                l += int(size.replace("L", ''))
            elif size.startswith('XL'):
                xl += int(size.replace("XL", ''))
            elif size.startswith('XXL'):
                xxl += int(size.replace("XXL", ''))

    await message.answer(f"*–†–∞–∑–º–µ—Ä S:* {s}\n"
                         f"*–†–∞–∑–º–µ—Ä M:* {m}\n"
                         f"*–†–∞–∑–º–µ—Ä L:* {l}\n"
                         f"*–†–∞–∑–º–µ—Ä XL:* {xl}\n"
                         f"*–†–∞–∑–º–µ—Ä XXL:* {xxl}", parse_mode=ParseMode.MARKDOWN)


# –í–´–†–£–ß–ö–ê
@dp.message_handler(admin_only, commands=['gain'])
async def getGain(message: types.Message):
    gain = sql.SelectGain()
    total = '{:,}'.format(gain[0][0]).replace(',', ' ')
    await message.answer(f"*–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:* {total}‚ÇΩ", parse_mode=ParseMode.MARKDOWN)


# –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ë–î
@dp.message_handler(admin_only, commands=['users'])
async def usersAmount(message: types.Message):
    amount = sql.SelectUsersAmount()
    await message.answer(f"*–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {amount[0][0]}", parse_mode=ParseMode.MARKDOWN)


# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –ü–†–û–ú–û–ö–û–î–ê–ú
@dp.message_handler(admin_only, commands=['promo'])
async def promoUsages(message: types.Message):
    args = message.get_args()
    promo = sql.SelectDiscount(args)
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ `{promo[0][1]}`\n"
                         f"*–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:* {promo[0][3]}", parse_mode=ParseMode.MARKDOWN)


# –†–ê–°–°–´–õ–ö–ê
@dp.message_handler(admin_only, commands=['msg'])
async def sendAll(message: types.Message):
    await MessageStateGroup.message.set()
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ")


# –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –†–ê–°–°–´–õ–ö–ò
@dp.message_handler(state=MessageStateGroup.message)
async def getMessage(message: types.Message, state: FSMContext):
    messageKeyboard = InlineKeyboardMarkup()
    messageKeyboard.add(InlineKeyboardButton(text="üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="addPhotoToMessage"))
    messageKeyboard.add(InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="sendMessage"))
    messageKeyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancelMessage"))

    async with state.proxy() as data:
        data['message'] = message.md_text.replace('\\', '')
        await message.answer(f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{data['message']}", parse_mode=ParseMode.MARKDOWN, reply_markup=messageKeyboard)


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–û–¢–û –ö –¢–ï–ö–°–¢–£ –†–ê–°–°–´–õ–ö–ò
@dp.callback_query_handler(text="addPhotoToMessage", state='*')
async def addPhotoToMessage(callback: types.CallbackQuery, state: FSMContext):
    await MessageStateGroup.photo.set()
    await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")


# –ü–û–õ–£–ß–ï–ù–ò–ï –§–û–¢–û
@dp.message_handler(state=MessageStateGroup.photo, content_types=['photo'])
async def getPhoto(message: types.Message, state: FSMContext):
    messageKeyboard = InlineKeyboardMarkup()
    messageKeyboard.add(InlineKeyboardButton(text='üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='sendPhotoMessage'))
    messageKeyboard.add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancelMessage'))

    async with state.proxy() as data:
        data['photo'] = message.photo[0]['file_id']
        await message.answer_photo(photo=data['photo'], caption=data['message'], parse_mode=ParseMode.MARKDOWN, reply_markup=messageKeyboard)


# –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï (–ë–ï–ó –§–û–¢–û)
@dp.callback_query_handler(text="sendMessage", state='*')
async def sendMessage(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

    async with state.proxy() as data:
        users = sql.SelectUsers()
        for u in users:
            await bot.send_message(u[0], data['message'], parse_mode=ParseMode.MARKDOWN)
    await state.finish()


# –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï (–° –§–û–¢–û)
@dp.callback_query_handler(text="sendPhotoMessage", state='*')
async def sendPhotoMessage(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

    async with state.proxy() as data:
        users = sql.SelectUsers()
        for u in users:
            await bot.send_photo(u[0], photo=data['photo'], caption=data['message'], parse_mode=ParseMode.MARKDOWN)
    await state.finish()


# –û–¢–ú–ï–ù–ò–¢–¨ –†–ê–°–°–´–õ–ö–£
@dp.callback_query_handler(text="cancelMessage", state='*')
async def cancelMessage(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.delete()
    await callback.message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)